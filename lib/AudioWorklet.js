(()=>{class t extends AudioWorkletProcessor{constructor(t){super(t),Object.assign(this,t.processorOptions,{uint8:new Uint8Array(0)}),this.port.onmessage=this.appendBuffers.bind(this)}async appendBuffers({data:{buffer:t}}){const e=new Uint8Array(this.uint8.length+t.length);return e.set(this.uint8,0),e.set(t,this.uint8.length),this.uint8=e,!0}endOfStream(){this.port.postMessage({ended:!0,currentTime,currentFrame})}process(t,e){const s=e[0];if(this.offset>=this.uint8.length)return!0;const r=new Uint8Array(256);for(let t=0;t<256&&!(this.offset>=this.uint8.length);t++,this.offset++)r[t]=this.uint8[this.offset];const n=new Uint16Array(r.buffer);for(let t=0;t<n.length;t++){const e=n[t],r=e>=32768?-(65536-e)/32768:e/32767;s[0][t]=r}return!0}}registerProcessor("audio-data-worklet-stream",t)})();